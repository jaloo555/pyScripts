import hashlib
import itertools
import time

# Get hash
def getHash(txt):
  res = hashlib.md5(txt.encode('utf-8'))
  return res.hexdigest()

# Generate possible combination of passwords
# Takes in the number of passwords to be cracked, running time,preHash
def genMatch(count,preHash):
  possibleSets = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@"
  # counts number of passwords cracked
  internalCount = 0
  it = 1
  # Start timer
  start = time.time()
  print("# of passwords to solve: " + str(count))
  while (internalCount != count):
    # generate permutations of the possible characters with itertools
    perm_iterator = (itertools.permutations(possibleSets, it))
    found = False
    for s in perm_iterator:
      if found != True:
        pw = ''.join(s)
        sH = getHash(pw)
        for h in preHash:
          if h == sH:
            end = time.time()
            print(pw)
            print("Time elapsed:" + str(end - start))
            # knowing that the password for this length is found, increment the length of string generated by 1
            internalCount += 1
            found = True
            pass
      else:
        break

    it = it + 1
    print(it)

# Main
if __name__ == "__main__":
  # Set up array to store the five files
  preHash = []
  # Read in the file
  with open('./hashes.txt', 'r') as f:
    line = f.readline()
    while line:
      preHash.append(line.rstrip())
      line = f.readline()
  # Run the bruteforce algorithm
  genMatch(len(preHash), preHash)
